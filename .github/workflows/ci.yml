name: Vibe Coding CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Agent Context Validation
  validate-agent-context:
    name: ü§ñ Validate Agent Context
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate agent handoff patterns
        run: |
          echo "üîç Checking for proper agent handoff patterns..."
          if grep -r "@agent" src/ --include="*.js" --include="*.ts"; then
            echo "‚úÖ Agent handoff patterns found"
          else
            echo "‚ö†Ô∏è No agent handoff patterns detected"
          fi

      - name: Check documentation sync
        run: |
          echo "üìö Validating documentation is up to date..."
          npm run docs
          if git diff --quiet -- . ':(exclude)docs/'; then
            echo "‚úÖ Documentation is synchronized"
          else
            echo "‚ùå Documentation needs to be updated"
            exit 1
          fi

  # Code Quality & Type Safety
  code-quality:
    name: üîç Code Quality & Type Safety
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run typecheck

      - name: Run Prettier format check
        run: npm run format:check

  # Testing Suite
  test:
    name: üß™ Testing Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: Run unit tests with coverage
        if: matrix.test-type == 'unit'
        run: npm run test:coverage

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run e2e

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Agent Collaboration Build
  build:
    name: üöÄ Agent Collaboration Build
    runs-on: ubuntu-latest
    needs: [validate-agent-context, code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full build pipeline
        run: npm run build

      - name: Generate documentation
        run: npm run docs

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            docs/
            coverage/

  # Dependabot auto-merge
  dependabot:
    name: ü§ñ Dependabot Auto-merge
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    needs: [validate-agent-context, code-quality, test]
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge Dependabot PRs
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
